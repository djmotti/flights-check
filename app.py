{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99ed954e-aa6a-4224-9f66-d95b2d965135",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on http://127.0.0.1:5000\n",
      "Press CTRL+C to quit\n",
      "127.0.0.1 - - [25/Jan/2025 01:14:53] \"GET / HTTP/1.1\" 404 -\n",
      "127.0.0.1 - - [25/Jan/2025 01:14:53] \"GET /favicon.ico HTTP/1.1\" 404 -\n",
      "127.0.0.1 - - [25/Jan/2025 01:16:03] \"GET / HTTP/1.1\" 404 -\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request\n",
    "from twilio.twiml.messaging_response import MessagingResponse\n",
    "from googletrans import Translator\n",
    "import requests\n",
    "\n",
    "app = Flask(__name__)\n",
    "translator = Translator()\n",
    "\n",
    "# In-memory user data (replace with a database for production)\n",
    "user_data = {}\n",
    "\n",
    "# Predefined translations\n",
    "translations = {\n",
    "    \"choose_language\": {\n",
    "        \"en\": \"Welcome! Please choose your language: English, Hebrew, French.\",\n",
    "        \"he\": \"ברוך הבא! אנא בחר את השפה שלך: אנגלית, עברית, צרפתית.\",\n",
    "        \"fr\": \"Bienvenue! Veuillez choisir votre langue: anglais, hébreu, français.\"\n",
    "    },\n",
    "    \"ask_destination\": {\n",
    "        \"en\": \"What's your destination?\",\n",
    "        \"he\": \"מה היעד שלך?\",\n",
    "        \"fr\": \"Quelle est votre destination?\"\n",
    "    },\n",
    "    \"ask_budget\": {\n",
    "        \"en\": \"What's your budget per person (in USD)?\",\n",
    "        \"he\": \"מה התקציב שלך לאדם (בדולר אמריקאי)?\",\n",
    "        \"fr\": \"Quel est votre budget par personne (en USD)?\"\n",
    "    },\n",
    "    \"ask_dates\": {\n",
    "        \"en\": \"Please provide your travel dates (e.g., 2025-03-10 to 2025-03-20).\",\n",
    "        \"he\": \"אנא הזן את תאריכי הנסיעה שלך (לדוגמה, 2025-03-10 עד 2025-03-20).\",\n",
    "        \"fr\": \"Veuillez fournir vos dates de voyage (par exemple, 2025-03-10 au 2025-03-20).\"\n",
    "    },\n",
    "    \"searching\": {\n",
    "        \"en\": \"Thanks! Searching for the best packages for you...\",\n",
    "        \"he\": \"תודה! מחפש את החבילות הטובות ביותר עבורך...\",\n",
    "        \"fr\": \"Merci ! Recherche des meilleures offres pour vous...\"\n",
    "    }\n",
    "}\n",
    "\n",
    "# Flight and hotel API placeholders\n",
    "FLIGHT_API_URL = \"https://www.israir.co.il\"\n",
    "HOTEL_API_URL = \"https://www.israir.co.il\"\n",
    "API_HEADERS = {\"Authorization\": \"Bearer YOUR_API_KEY\"}\n",
    "\n",
    "@app.route('/whatsapp', methods=['POST'])\n",
    "def whatsapp_reply():\n",
    "    incoming_msg = request.values.get('Body', '').strip().lower()\n",
    "    user_phone = request.values.get('From', '')  # User's phone number as unique ID\n",
    "\n",
    "    # Initialize user data if first interaction\n",
    "    if user_phone not in user_data:\n",
    "        user_data[user_phone] = {\"step\": 0, \"language\": \"en\"}  # Default language: English\n",
    "\n",
    "    # Retrieve user session\n",
    "    user_session = user_data[user_phone]\n",
    "    step = user_session[\"step\"]\n",
    "    language = user_session[\"language\"]\n",
    "\n",
    "    # Create a Twilio response\n",
    "    response = MessagingResponse()\n",
    "    msg = response.message()\n",
    "\n",
    "    # Step 0: Language Selection\n",
    "    if step == 0:\n",
    "        if \"english\" in incoming_msg or \"hebrew\" in incoming_msg or \"french\" in incoming_msg:\n",
    "            if \"english\" in incoming_msg:\n",
    "                user_session[\"language\"] = \"en\"\n",
    "            elif \"hebrew\" in incoming_msg or \"עברית\" in incoming_msg:\n",
    "                user_session[\"language\"] = \"he\"\n",
    "            elif \"french\" in incoming_msg or \"français\" in incoming_msg:\n",
    "                user_session[\"language\"] = \"fr\"\n",
    "            user_session[\"step\"] = 1\n",
    "            msg.body(translations[\"ask_destination\"][user_session[\"language\"]])\n",
    "        else:\n",
    "            msg.body(translations[\"choose_language\"][\"en\"])\n",
    "        return str(response)\n",
    "\n",
    "    # Step 1: Ask for Destination\n",
    "    elif step == 1:\n",
    "        user_session[\"destination\"] = incoming_msg\n",
    "        user_session[\"step\"] = 2\n",
    "        msg.body(translations[\"ask_budget\"][language])\n",
    "        return str(response)\n",
    "\n",
    "    # Step 2: Ask for Budget\n",
    "    elif step == 2:\n",
    "        try:\n",
    "            user_session[\"budget\"] = int(incoming_msg)  # Convert to integer\n",
    "            user_session[\"step\"] = 3\n",
    "            msg.body(translations[\"ask_dates\"][language])\n",
    "        except ValueError:\n",
    "            msg.body(\"Please enter a valid number for your budget.\")\n",
    "        return str(response)\n",
    "\n",
    "    # Step 3: Ask for Travel Dates\n",
    "    elif step == 3:\n",
    "        # Expecting dates in \"YYYY-MM-DD to YYYY-MM-DD\" format\n",
    "        if \"to\" in incoming_msg:\n",
    "            dates = incoming_msg.split(\"to\")\n",
    "            user_session[\"travel_dates\"] = {\n",
    "                \"start_date\": dates[0].strip(),\n",
    "                \"end_date\": dates[1].strip()\n",
    "            }\n",
    "            user_session[\"step\"] = 4\n",
    "            msg.body(translations[\"searching\"][language])\n",
    "            \n",
    "            # Call the API to get packages\n",
    "            packages = get_flight_and_hotel_packages(user_session)\n",
    "            if packages:\n",
    "                msg.body(format_packages(packages, language))\n",
    "            else:\n",
    "                msg.body(\"No packages found. Please try again with different details.\")\n",
    "        else:\n",
    "            msg.body(\"Please provide travel dates in the format YYYY-MM-DD to YYYY-MM-DD.\")\n",
    "        return str(response)\n",
    "\n",
    "    # Default fallback\n",
    "    else:\n",
    "        msg.body(\"Type 'start' to begin planning your trip!\")\n",
    "        return str(response)\n",
    "\n",
    "# Function to get flight and hotel packages (mock implementation)\n",
    "def get_flight_and_hotel_packages(user_session):\n",
    "    # Example request structure for flight and hotel APIs\n",
    "    flight_response = requests.get(\n",
    "        FLIGHT_API_URL,\n",
    "        headers=API_HEADERS,\n",
    "        params={\n",
    "            \"origin\": \"TLV\",  # Example origin\n",
    "            \"destination\": user_session[\"destination\"],\n",
    "            \"departure_date\": user_session[\"travel_dates\"][\"start_date\"],\n",
    "            \"return_date\": user_session[\"travel_dates\"][\"end_date\"],\n",
    "            \"budget\": user_session[\"budget\"]\n",
    "        }\n",
    "    )\n",
    "\n",
    "    hotel_response = requests.get(\n",
    "        HOTEL_API_URL,\n",
    "        headers=API_HEADERS,\n",
    "        params={\n",
    "            \"destination\": user_session[\"destination\"],\n",
    "            \"checkin_date\": user_session[\"travel_dates\"][\"start_date\"],\n",
    "            \"checkout_date\": user_session[\"travel_dates\"][\"end_date\"],\n",
    "            \"max_price\": user_session[\"budget\"]\n",
    "        }\n",
    "    )\n",
    "\n",
    "    # Combine and sort results\n",
    "    if flight_response.status_code == 200 and hotel_response.status_code == 200:\n",
    "        flights = flight_response.json()[\"results\"]\n",
    "        hotels = hotel_response.json()[\"results\"]\n",
    "        packages = [{\"flight\": f, \"hotel\": h, \"total_price\": f[\"price\"] + h[\"price\"]} for f in flights for h in hotels]\n",
    "        return sorted(packages, key=lambda x: x[\"total_price\"])[:10]  # Return top 10 packages\n",
    "    return []\n",
    "\n",
    "# Format packages for display\n",
    "def format_packages(packages, language):\n",
    "    result = translations[\"searching\"][language] + \"\\n\\n\"\n",
    "    for i, package in enumerate(packages):\n",
    "        result += f\"Option {i+1}:\\n\"\n",
    "        result += f\"- Flight: {package['flight']['details']}\\n\"\n",
    "        result += f\"- Hotel: {package['hotel']['name']} ({package['hotel']['stars']} stars)\\n\"\n",
    "        result += f\"- Total Price: ${package['total_price']}\\n\\n\"\n",
    "    return result\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(port=5000)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

pip freeze > requirements.txt

web: gunicorn app:app

__pycache__/
*.pyc
*.pyo
*.pyd
.env


git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/<your-username>/<your-repo-name>.git
git push -u origin main


